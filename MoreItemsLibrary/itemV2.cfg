title = "More Items Library";
description = "A library of functions to simplify working with mod items.

This mod does nothing on its own. It only serves as a modders' resource for adding temporary vanilla and custom items to a player's inventory. Eventually, it will also handle making these items display only to mod-using players in the trusted realm. This change would prevent custom item mods from impacting the experiences of unmodded players, a likely condition of sanctioned custom item mods.

Non-cosmetic mod items that provide an advantage will likely never be sanctioned, and sanctioning this library won't allow their use in the trusted realm.

INSTALLATION: Make sure that More Items Library is underneath VMF in your launcher's mod order, but higher than any mods that depend on it.

NOTE: This library is currently in development. Please expect instability.

[url=https://github.com/Aussiemon/VT2-More-Items-Library]Project Source [Git][/url]

Usage:
	
		[b]- If the item is completely new, and does not yet have an ItemMasterList entry:[/b]
		
			1. Create a new table
			
			2. Fill that table with the relevant regular fields of an ItemMasterList entry
			
			3. Insert your new entry into an array
			
			4. Pass that array to mod.add_mod_items_to_masterlist()
			
			Your item now has an ItemMasterList and NetworkLookup entry. ANY COMPLETELY NEW ITEM WILL CURRENTLY CRASH LOBBY PLAYERS WHO DO NOT HAVE MATCHING ITEM LISTS.
			
		[b]- When an item has an ItemMasterList entry, it can be added to your inventory:[/b]
		
			1. Use table.clone to copy the ItemMasterList entry
			
			2. Add a mod_data table to your entry copy (entry.mod_data = {})
			
			3. To this mod_data table, add any of the fields listed below in the backend_template for your item's slot_type. To look at your existing items for reference material, call the Vermintide Mod Framework's 'dtf' function on the return result of PlayFabMirror.get_all_inventory_items().
					
			4. Insert your new entry into an array
			
			5. Pass that array to mod.add_mod_items_to_local_backend() with your mod's name
			
			For example:[code]
local entry = table.clone(ItemMasterList["ring_06"])
entry.mod_data = {
	backend_id = "something_unique",
	ItemInstanceId = "same as backend_id",
	CustomData = {
		traits = "[\"ring_potion_duration\"]",
		power_level = "300",
		properties = "{\"power_vs_skaven\":1,\"power_vs_unarmoured\":1}"
	},
	traits = {
		"ring_potion_duration"
	},
	power_level = 300,
	properties = {
		power_vs_unarmoured = 1,
		power_vs_skaven = 1,
	},
}
mod:add_mod_items_to_local_backend({entry}, "your mod name")[/code]
			
			Your item is now 'owned' for the game session, and will appear in item menus.
	
		[b]- When trying to remove items created by MoreItemsLibrary:[/b]

			1. Create a numerical array of backend_ids for removal (e.g. local items = { "one", "two", "three" })
	
			2. Pass that array to mod.remove_mod_items_from_local_backend() with your mod's name";
preview = "item_preview.png";
content = "bundleV2";
language = "english";
visibility = "public";
published_id = 1422758813L;
apply_for_sanctioned_status = false;
tags = [ ];
